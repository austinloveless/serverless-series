type Blog
  @auth(
    rules: [
      { allow: owner, operations: [update, create, delete] }
      { allow: owner, ownerField: "editors", operations: [update] }
    ]
  )
  @model {
  id: ID!
  name: String!
  thumbnail: String
  originalImage: String
  owner: String
  posts: [Post] @connection(name: "BlogPosts")
  writers: [String]
  editors: [String]
  # What a many to many relationship looks like:
  # editors: [BlogUserJoin] @connection(name: "EditorBlogs")
}
type Post
  @auth(
    rules: [
      { allow: owner, operations: [update, create, delete] }
      {
        allow: owner
        ownerField: "editors"
        operations: [update, create, delete]
      }
      {
        allow: owner
        ownerField: "writers"
        operations: [update, create, delete]
      }
    ]
  )
  @model {
  id: ID!
  title: String!
  content: String
  thumbnail: String
  originalImage: String
  draft: Boolean
  owner: String
  editors: [String]
  writers: [String]
  comments: [Comment] @connection(name: "PostComments")
  blog: Blog @connection(name: "BlogPosts")
  user: User @connection(name: "UserPosts")
}

type Comment
  @auth(
    rules: [
      { allow: owner, operations: [create, update, delete] }
      { allow: owner, ownerField: "postEditors", operations: [delete] }
    ]
  )
  @model {
  id: ID!
  content: String
  owner: String
  postEditors: [String]
  post: Post @connection(name: "PostComments")
}

type User
  @auth(rules: [{ allow: owner, operations: [update, create, delete] }])
  @key(fields: ["username"])
  @model {
  id: ID!
  username: String!
  profilePicture: String
  about: String
  posts: [Post] @connection(name: "UserPosts")
  # blogs: [BlogUserJoin] @connection(name: "BlogEditors")
}

# type BlogUserJoin @model {
# id: ID!
# blog: Blog! @connection(name: "EditorBlogs")
# editor: User! @connection(name: "BlogEditors")
# }
