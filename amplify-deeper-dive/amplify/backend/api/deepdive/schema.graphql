type Blog
  @auth(rules: [{ allow: owner, operations: [create, update, delete] }])
  @model {
  id: ID!
  name: String!
  thumbnail: String
  originalImage: String
  posts: [Post] @connection(name: "BlogPosts")
  users: [BlogUserJoin] @connection(name: "UserBlogs")
}
type Post
  @auth(
    rules: [
      { allow: owner, operations: [create, update, delete] }
      { allow: owner, ownerField: "editors", operations: [update] }
    ]
  )
  @model {
  id: ID!
  title: String!
  content: String
  thumbnail: String
  originalImage: String
  editors: [String]
  owner: String
  blog: Blog @connection(name: "BlogPosts")
  comments: [Comment] @connection(name: "PostComments")
  user: User @connection(name: "UserPosts")
}

type Comment
  @auth(
    rules: [
      { allow: owner, operations: [create, update, delete] }
      { allow: owner, ownerField: "postOwner", operations: [delete] }
    ]
  )
  @model {
  id: ID!
  content: String
  owner: String
  postOwner: String
  post: Post @connection(name: "PostComments")
}

type User
  @auth(rules: [{ allow: owner, operations: [create, update, delete] }])
  @key(fields: ["username"])
  @model {
  id: ID!
  username: String!
  profilePicture: String
  about: String
  posts: [Post] @connection(name: "UserPosts")
  blogs: [BlogUserJoin] @connection(name: "BlogUsers")
}

type BlogUserJoin @model {
  id: ID!
  blog: Blog! @connection(name: "UserBlogs")
  user: User! @connection(name: "BlogUsers")
}
